})
output$TableIn <- renderTable({
if(input$tableChoices == "countries"){
CountryNames
}
else if(input$tableChoices == "indicator"){
oneIndicator()
}
else if(input$tableChoices == "country"){
oneCountry()
}
else if(input$tableChoices == "year"){
OneYear()
}
})
output$distPlot1 <- renderPlot({
if(input$PerorNum){
value <- as.character(input$PercentIndicators[[1]])
Graph_Pie(value, input$SelectAYearPie, input$Count_SelPie)
} else{
Graph_Pie(input$Indicators[[1]], input$SelectAYearPie, input$Count_SelPie)
}
})
output$distPlot2 <- renderPlot({
if(input$PerorNum){
value <- as.character(input$PercentIndicators[[1]])
Graph_Bar(value, input$SelectAYearChart, input$Count_SelChart)
} else{
Graph_Bar(input$Indicators[[1]], input$SelectAYearChart, input$Count_SelChart)
}
})
output$distPlot3<- renderPlot({
year <- input$SelectAYearChart
year_last <- input$consecutiveYearsChart + year
year_list <- year:year_last
if(input$PerorNum){
value <- as.character(input$PercentIndicators[[1]])
value2 <- as.character(input$PercentIndicators[[2]])
Graph_Dot(value, value2, year_list, input$Count_SelChart)
} else{
Graph_Bar(input$Indicators[[1]], input$Indicators[[2]], year_list, input$Count_SelChart)
}
})
observe({
var <- length(input$CountryByVariableSelect)
updateSliderInput(session, "SelectCat", choices = 1:var)
})
}
# Source code - https://rstudio.github.io/shinydashboard/examples.html
source("./packages.R")
source("./maps.R")
source("./IndicatorLists.R")
source("./Table.R")
source("./charts.R")
library(shinydashboard)
library(dplyr)
L4 <- read.csv(file = "L4.csv", stringsAsFactors = FALSE)
Data <- L4 %>% filter(region.id != "NA", name != "Virgin Islands (U.S.)", name != "Tuvalu", name != "British Virgin Islands", name != "Gibraltar", name != "Channel Islands", name != "Curacao", name != "Micronesia, Fed. Sts.", name != "Hong Kong SAR, China", name != "Macao SAR, China", name != "St. Martin (French part)", name != "Sint Maarten (Dutch part)")
CountryNames <- Data %>% select(name)
CountryCodes <- Data %>% select(iso2Code)
#Variable <- c("Region" = "region.value", "Income Level" = "incomeLevel.value")colnames(IndicatorsData)
IndicatorsData <- read.csv(file = "IndicatorsData.csv", stringsAsFactors = FALSE)
Variable <- colnames(IndicatorsData)
header <- dashboardHeader(title = "The World Bank Database")
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Data Acknowledgements", tabName = "Intro", icon = icon("globe")),
menuItem("The World by Maps", tabName = "Maps", icon = icon("map-marker")),
menuItem("The World by Charts", tabName = "Charts", icon = icon("globe")),
menuItem("The World by Tables", tabName = "Tables", icon = icon("table")),
menuItem("The World's Indicators", tabName = "Indicators", icon = icon("globe"),
selectInput("Indicators", "Numbers (Select one or more)", list("Unemployment" = c(Employment),
"Education" = c(Education),
"Population" = c(Population),
"Health" = c(Health),
"Economy" = c(Economy),
"Fun Facts" = c(FunFacts)), selected = Population$Total, multiple = TRUE),
selectInput("PercentIndicators", "Percentages (Select one or more)", list("Unemployment" = c(UnemploymentPercentages),
"Education" = c(EducationPercentages),
"Population" = c(PopulationPercentages),
"Health" = c(HealthPercentages),
"Economy" = c(EconomyPercentages),
"Fun Facts" = c(FunFactsPercentages)), multiple = TRUE))
)
)
body <- dashboardBody(
tabItems(
tabItem("Intro",
fluidRow(
box(
width = 12, status = "primary", solidHeader = TRUE,
title = "Application Introduction",
textOutput("AppIntro")
),
box(
width = 12, color = "light-blue",
title = "Data from World Bank",
textOutput("DataAckn")
)
)
),
tabItem("Maps",
fluidRow(
box(
width = 12, status = "primary", solidHeader = TRUE,
title = "United States of America",
tabsetPanel(
id = "tabselected",
tabPanel("World Map", value = 1, plotOutput("WorldMap")),
tabPanel("Maps by Country", value = 2, plotOutput("MapsByCountry")),
tabPanel("Country by Variable", value = 3, plotOutput("CountryByVariable"))
)
),
box(
width = 12, color = "light-blue",
title = "Option",
conditionalPanel(condition = "input.tabselected == 1",
selectInput("WorldMapSelect", label = "Select a Country", choices = CountryNames, selected = "United States")),
conditionalPanel(condition = "input.tabselected == 2",
selectInput("MapsByCountrySelect", label = "Select a Country", choices = CountryNames, selected = "Canada")),
conditionalPanel(condition = "input.tabselected == 3",
selectInput("CountryByVariableSelect", label = "Select a Variable", choices = c(Variable), selected = "Population"),
selectInput("SelectCat", label = "Select a Category", choices = 1:20, selected = 1),
selectInput("SelectYear", label = "Select a Year", choices = 1960:2017, selected = "2012"))
)
)
),
tabItem("Charts",
fluidRow(
box(
width = 8,
title = "Widgets for all",
radioButtons("PerorNum", label = "Type of Data", choices = list("Percentages" = TRUE, "Numerical" = FALSE))
)
),
column(width = 6,
box(
width = NULL, solidHeader = TRUE,
title = "Pie Chart",
selectInput("SelectAYearPie", label = "Select A Year", choices = 1960:2017),
selectInput("Count_SelPie", label = "Country Selection", choices = CountryNames, multiple = TRUE),
textOutput("Charts1"),
plotOutput("distPlot1")
)
),
column(width = 6,
box(
width = NULL, solidHeader = TRUE,
title = "Column Chart",
selectInput("SelectAYearChart", label = "Select A Year", choices = 1960:2017),
selectInput("Count_SelChart", label = "Country Selection", choices = CountryNames, multiple = TRUE),
textOutput("Charts2"),
plotOutput("distPlot2")
)
),
column(width = 12,
box(
width = NULL, solidHeader = TRUE,
title = "Plot Diagram",
textOutput("Charts3"),
plotOutput("distPlot3"),
selectInput("SelectAYearChart", label = "Select A Year", choices = 1960:2017),
radioButtons("consecutiveYearsChart", label = "Consecutive Years To Compare", choices = 1:5),
selectInput("Count_SelChart", label = "Country Selection", choices = CountryNames)
)
)
),
tabItem("Tables",
fluidRow(
box(
width = 12, status = "primary", solidHeader = TRUE,
title = "Raw Data Analysis",
textOutput("Tables"),
tableOutput("TableIn")
),
column( width = 4,
box(width = NULL,
title = "Table Options",
radioButtons("tableChoices", label = "Table Types", choices = list("Country & Regions List" = "countries",
"Single Data Point" = "indicator",
"One Country" = "country",
"One Year" = "year"))
)
),
column(width = 4,
box(width = NULL,
title = "Single Data Point Option",
selectInput("SelectAYear", label = "Select A Year", choices = 1960:2017),
radioButtons("consecutiveYears", label = "Consecutive Years To Compare", choices = 1:5),
selectInput("Count_SelData", label = "Country Selection", choices = CountryNames, multiple = TRUE)
)
),
column(width = 4,
box(width = NULL,
title = "Single Year Option",
selectInput("SelectYear", label = "Select A Year", choices = 1960:2017),
selectInput("Count_SelYear", label = "Country Selection", choices = CountryNames, multiple = TRUE)
)
),
column(width = 4,
box(
width = NULL,
title = "Single Country Option",
selectInput("SelectYears", label = "Select A Year", choices = 1960:2017),
radioButtons("consecutiveYearsCountry", label = "Consecutive Years To Compare", choices = 1:5),
selectInput("Count_SelCountry", label = "Country Selection", choices = CountryNames)
)
)
)
)
)
)
dashboardPage(header, sidebar, body)
# Source code - https://rstudio.github.io/shinydashboard/examples.html
runApp()
runApp()
length("Employment")
length(Employment)
runApp()
runApp()
library(dplyr)
library(ggplot2)
library(maps)
L4 <- read.csv(file = "L4.csv", stringsAsFactors = FALSE)
Data <- L4 %>% filter(region.id != "NA", name != "Virgin Islands (U.S.)", name != "Tuvalu", name != "British Virgin Islands")
CountryNames <- Data %>% select(name) %>% mutate(country_name = name) %>% select(country_name)
function(input, output, session) {
output$AppIntro <- renderText({
"Introduction to this application here"
})
output$DataAckn <- renderText({
"Acknoledgments about Data from World Bank here"
})
output$Charts <- renderText({
"Got some charts here..."
})
output$Tables <- renderText({
"Tables gallore, you cannot ignore"
})
output$WorldMap <- renderPlot({
Var <- countrycode(input$WorldMapSelect, "country.name", "iso2c", warn = FALSE)
CountryHighlight(Var)
})
output$MapsByCountry <- renderPlot({
Var <- countrycode(input$MapsByCountrySelect, "country.name", "iso2c", warn = FALSE)
CreateMap(Var)
})
output$CountryByVariable <- renderPlot({
x <- toString(input$CountryByVariableSelect)
y <- toString(input$SelectYear)
cat <- input$SelectCat
CountryAPIColor(x, y, "list(country_list)", cat)
})
output$DataAckn <- renderText({
input$Indicators
})
output$TableIn <- renderTable({
if(input$tableChoices == "countries"){
CountryNames
}
else if(input$tableChoices == "indicator"){
oneIndicator()
}
else if(input$tableChoices == "country"){
oneCountry()
}
else if(input$tableChoices == "year"){
OneYear()
}
})
output$distPlot1 <- renderPlot({
if(input$PerorNum){
value <- as.character(input$PercentIndicators[[1]])
Graph_Pie(value, input$SelectAYearPie, input$Count_SelPie)
} else{
Graph_Pie(input$Indicators[[1]], input$SelectAYearPie, input$Count_SelPie)
}
})
output$distPlot2 <- renderPlot({
if(input$PerorNum){
value <- as.character(input$PercentIndicators[[1]])
Graph_Bar(value, input$SelectAYearChart, input$Count_SelChart)
} else{
Graph_Bar(input$Indicators[[1]], input$SelectAYearChart, input$Count_SelChart)
}
})
output$distPlot3<- renderPlot({
year <- input$SelectAYearChart
year_last <- input$consecutiveYearsChart + year
year_list <- year:year_last
if(input$PerorNum){
value <- as.character(input$PercentIndicators[[1]])
value2 <- as.character(input$PercentIndicators[[2]])
Graph_Dot(value, value2, year_list, input$Count_SelChart)
} else{
Graph_Bar(input$Indicators[[1]], input$Indicators[[2]], year_list, input$Count_SelChart)
}
})
observe({
x <- paste0(input$CountryByVariableSelect, ")")
var <- eval(parse(text=paste("length(", x, sep = "")))
updateSliderInput(session, "SelectCat", choices = 1:var)
})
}
# Source code - https://rstudio.github.io/shinydashboard/examples.html
runApp()
runApp()
Employment
c(Employment)
c(Employment[[1]])
c(Employment[[2]])
Employment()
rm(list = ls())
runApp()
runApp()
runApp()
IndicatorsData <- read.csv(file = "IndicatorsData.csv", stringsAsFactors = FALSE)
Variable <- colnames(IndicatorsData)
Variable <- c(Variable)
Variable
Variable[-1]
runApp()
CountryAPIColor("Health[[1]]", "2010", "list(\"China\", \"Vietnam\", \"Canada\")")
CountryAPIColor("Health", "2010", "list(\"China\", \"Vietnam\", \"Canada\")", 1)
CountryAPIColor("Health", "2010", "list(\"China\", \"Vietnam\", \"Canada\")", "1")
CountryAPIColor("Population", "2010", "list(\"China\", \"Vietnam\", \"Canada\")", "1")
CountryAPIColor("Health", "2010", "list(\"China\", \"Vietnam\", \"Canada\")", "1")
staByYear(Health[[1]], "2010", list("China"))
#CountryAPIColor("Population[[1]]", "2010", "list(\"China\", \"Vietnam\", \"Canada\")")
CountryAPIColor <- function(Indicator, Year, Countries, Cat){
Catpaste <- paste0("[[", Cat,"]]")
IndicatorPaste <- paste0(Indicator, Catpaste)
x <- paste0(IndicatorPaste, ", ", Year, ", ", Countries, ")")
APIData <- eval(parse(text=paste("staByYear(", x, sep = "")))
APIData <- flatten(APIData)
APIData <- APIData %>% mutate(value = replace(value, is.na(value),0))
GetData <- APIData %>% mutate(iso2Code = countrycode(APIData$countryiso3code, "iso3c", "iso2c", warn = FALSE))
ToPlotData <- JoinData %>% inner_join(GetData, L4, by = "iso2Code")
return(CreateWorldMap + geom_polygon(data = ToPlotData, aes(x = long, y = lat, group = group, fill = value), color = "black") +
coord_fixed(1.3) + labs(x = "Longitude", y = "Latitude", fill=ToPlotData$indicator.value))
}
CountryAPIColor("Health", "2010", "list(\"China\", \"Vietnam\", \"Canada\")", "1")
runApp()
CountryAPIColor("Economy", "2010", "list(\"China\", \"Vietnam\", \"Canada\")", 1)
CountryAPIColor("Economy", "2010", "list(\"China\", \"Vietnam\", \"Canada\")", "1")
#CountryAPIColor("Population[[1]]", "2010", "list(\"China\", \"Vietnam\", \"Canada\")")
CountryAPIColor <- function(Indicator, Year, Countries, Cat){
Catpaste <- paste0("[[", Cat,"]]")
IndicatorPaste <- paste0(Indicator, Catpaste)
x <- paste0(IndicatorPaste, ", ", Year, ", ", Countries, ")")
APIData <- eval(parse(text=paste("staByYear(", x, sep = "")))
APIData <- flatten(APIData)
APIData <- APIData %>% mutate(value = replace(value, is.na(value),0))
GetData <- APIData %>% mutate(iso2Code = countrycode(APIData$countryiso3code, "iso3c", "iso2c", warn = FALSE))
ToPlotData <- JoinData %>% inner_join(GetData, L4, by = "iso2Code")
return(CreateWorldMap + geom_polygon(data = ToPlotData, aes(x = long, y = lat, group = group, fill = value), color = "black") +
coord_fixed(1.3) + labs(x = "Longitude", y = "Latitude", fill=ToPlotData$indicator.value))
}
runApp()
toString("Economy")
CountryAPIColor("Economy", "2010", "list(\"China\", \"Vietnam\", \"Canada\")", "2")
CountryAPIColor("Economy", "2010", "list(\"China\", \"Vietnam\", \"Canada\")", "1")
CountryAPIColor("Economy", "2010", "list(\"China\", \"Vietnam\", \"Canada\")", "2")
runApp()
CountryAPIColor("Economy", "2010", "list(\"China\", \"Vietnam\", \"Canada\")", 1)
CountryAPIColor("Economy", "2010", "list(country_list)", 1)
CountryAPIColor("Economy", "2012", "list(country_list)", 1)
CountryAPIColor("Economy", "2011", "list(country_list)", 1)
CountryAPIColor("Economy", "2011", "list(country_list)", 1)
CountryAPIColor("Economy", "2010", "list(country_list)", 1)
CountryAPIColor("Economy", "2011", "list(country_list)", 1)
CountryAPIColor("Economy", "2011", "list(country_list)", 2)
CountryAPIColor("Economy", "2011", "list(country_list)", 3)
CountryAPIColor("Economy", "2011", "list(country_list)", 4)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x <- paste0("Economic", ")")
var <- eval(parse(text=paste("length(", x, sep = "")))
x <- paste0("Economy", ")")
var <- eval(parse(text=paste("length(", x, sep = "")))
x
var
runApp()
var
updateSliderInput(session, "SelectCat", choices = 1:var)
runApp()
runApp()
source("./IndicatorLists.R")
runApp()
length(Economy)
source("./IndicatorLists.R")
library(dplyr)
library(ggplot2)
library(maps)
L4 <- read.csv(file = "L4.csv", stringsAsFactors = FALSE)
Data <- L4 %>% filter(region.id != "NA", name != "Virgin Islands (U.S.)", name != "Tuvalu", name != "British Virgin Islands")
CountryNames <- Data %>% select(name) %>% mutate(country_name = name) %>% select(country_name)
function(input, output, session) {
output$AppIntro <- renderText({
"Introduction to this application here"
})
output$DataAckn <- renderText({
"Acknoledgments about Data from World Bank here"
})
output$Charts <- renderText({
"Got some charts here..."
})
output$Tables <- renderText({
"Tables gallore, you cannot ignore"
})
output$WorldMap <- renderPlot({
Var <- countrycode(input$WorldMapSelect, "country.name", "iso2c", warn = FALSE)
CountryHighlight(Var)
})
output$MapsByCountry <- renderPlot({
Var <- countrycode(input$MapsByCountrySelect, "country.name", "iso2c", warn = FALSE)
CreateMap(Var)
})
output$CountryByVariable <- renderPlot({
x <- toString(input$CountryByVariableSelect)
y <- toString(input$SelectYear)
cat <- input$SelectCat
CountryAPIColor(x, y, "list(country_list)", cat)
})
output$DataAckn <- renderText({
input$Indicators
})
output$TableIn <- renderTable({
if(input$tableChoices == "countries"){
CountryNames
}
else if(input$tableChoices == "indicator"){
oneIndicator()
}
else if(input$tableChoices == "country"){
oneCountry()
}
else if(input$tableChoices == "year"){
OneYear()
}
})
output$distPlot1 <- renderPlot({
if(input$PerorNum){
value <- as.character(input$PercentIndicators[[1]])
Graph_Pie(value, input$SelectAYearPie, input$Count_SelPie)
} else{
Graph_Pie(input$Indicators[[1]], input$SelectAYearPie, input$Count_SelPie)
}
})
output$distPlot2 <- renderPlot({
if(input$PerorNum){
value <- as.character(input$PercentIndicators[[1]])
Graph_Bar(value, input$SelectAYearChart, input$Count_SelChart)
} else{
Graph_Bar(input$Indicators[[1]], input$SelectAYearChart, input$Count_SelChart)
}
})
output$distPlot3<- renderPlot({
year <- input$SelectAYearChart
year_last <- input$consecutiveYearsChart + year
year_list <- year:year_last
if(input$PerorNum){
value <- as.character(input$PercentIndicators[[1]])
value2 <- as.character(input$PercentIndicators[[2]])
Graph_Dot(value, value2, year_list, input$Count_SelChart)
} else{
Graph_Bar(input$Indicators[[1]], input$Indicators[[2]], year_list, input$Count_SelChart)
}
})
observe({
input <- toString(input$CountryByVariableSelect)
x <- paste0(input, ")")
var <- eval(parse(text=paste("length(", x, sep = "")))
updateSliderInput(session, "SelectCat", choices = 1:var)
econ <- toString(input$SelectCat)
if (econ == "1") {
updateSliderInput(session, "SelectYear", choices = 1960:2010)
}
if (econ == "2") {
updateSliderInput(session, "SelectYear", choices = 1960:2010)
}
})
}
# Source code - https://rstudio.github.io/shinydashboard/examples.html
runApp()
runApp()
runApp()
rm(lsit = ls())
rm(list = ls())
runApp()
runApp()
runApp()
runApp()
runApp()
library(dplyr)
library(ggplot2)
library(maps)
source("./IndicatorLists.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
